casos
1 todas correctas
2 todas correctas
3 todas correctas
4 todas correctas
5 todas vacias
6 2 correctas por bloque
7 2 correctas por bloque
8 2 correctas en lógica y dos correctas en algebra
9 2 correctas en lógica y dos correctas en algebra
10 ninguna correcta

del 11 al 20 igual pero es otra carrera



requerimientos segunda iteración

1) Estudiante pueda llenar el formulario una sola vez LISTO
2) Cantidad (número) de estudiantes que contestaron la A,B,C o D LISTO
3) Respuestas del formulario null LISTO
4) Informe de todas las respuestas de un estudiante ingresando su documento y toda la información personal de él 
5) Opción update de formulario al profe ingresando el documento del zapallo que respondió mal
6) Doble confirmación del envió del form de respuestas para el estudiante

git push --force origin main


/*
-Terminal
-pip install virtualenv
-python3 -m venv entorno
-.\entorno\Scripts\actívate
-pip install django
-django-admin startproject UTEC
-cd UTEC

-python manage.py runserver
-python manage.py migrate //solo migré las tablas por defecto
-python manage.py startapp diagnostico //me crea los archivos necesarios para una app llamada crud
-django-admin startapp diagnostico // pude haber usado ese comando también
-Creo las clases en models.py que luego seran mapeadas a la bd
-agrego en setting.py en INSTALLED_APPS la app 'diagnostico'
-ejecuto en terminal python manage.py makemigrations
-ejecuto en terminal python manage.py migrate // se crean las tablas de cada clase en sqlite
-cambio el idioma en seting por es-ar y la hora por America/Montevideo
-Agrego la línea LENGUAGE = 'en-us' para poder traducir la página después
-Agrego los modelos en admin.py // el enumerador no lo agregué
-ejecuto la línea de comando python manage.py createsuperuser
-agrego nombre del usuario (lalo27)
-email leocabre666@gmail.comando
-pass tequieromucho2
-ahora puedo acceder a 127.0.0.1:8000/admin y manejar recursos
-Para realizar un cambio en la base basta con re escribir el código luego  python manage.py makemigrations y finalmente  python manage.py migrate
-Cree la carpeta templates y static dentro de crud
-Creo dentro de crud un archivo url.py para manejar las rutas que tenga la app crud
-Creo dentro de vistas la funcion def home(request) 
-Agrego el path('', include('crud.url')) dentro del archivo url.py del proyecto
-El url.py que cree yo necesita importar el archivo views


*/
 
    
- Configurar rutas en el archivo urls con nombres de las def existentes en views
    python manage.py runserver

-Creo una carpeta llamada apps y hago 
    cd /apps
    django-admin startapp aplicacion1

-Configurar models.py 

-Creo la carpeta templates dentro del project y creo los html dentro

-Configuro una def dentro de views que llame al html 







-------------------models/sqlite-----------------------------------
#models.py
from django.db import models
from django.contrib.auth.models import User

class Bloque(models.TextChoices):  
    ALGEBRA = 'Algebra', 'Algebra'
    MODELIZACION = 'Modelizacion', 'Modelizacion'
    FUNCIONES_GRAFICAS = 'Funiones_Graficas', 'Funiones_Graficas'
    LOGICA = 'Logica', 'Logica'

class Seleccion(models.TextChoices):
    A = 'A', 'A'
    B = 'B', 'B'
    C = 'C', 'C'
    D = 'D', 'D'
    
class Carrera(models.Model):
    id_carrera = models.AutoField(primary_key=True)
    nombre = models.CharField(max_length=50)
    descripcion = models.CharField(max_length=200, null=True)
       
    def __str__(self): 
        return self.nombre

class Profesor(models.Model):
    id_profesor = models.AutoField(primary_key=True)
    documento = models.CharField(max_length=20, null=True)
    nombre = models.CharField(max_length=100, null=True)
    apellido = models.CharField(max_length=100, null=True)
    celular = models.CharField(max_length=15, null=True)
    email = models.EmailField(max_length=254, null=True)
    password = models.CharField(max_length=150, null=True)

    def __str__(self):
        return f"{self.nombre} {self.apellido}"

class Estudiante(models.Model):
    id_estudiante = models.AutoField(primary_key=True)
    documento = models.CharField(max_length=20, null=False)
    nombre = models.CharField(max_length=100, null=True)
    apellido = models.CharField(max_length=100, null=True)
    celular = models.CharField(max_length=15, null=True)
    email = models.EmailField(max_length=254, null=True)
    password = models.CharField(max_length=150, null=True)
    carrera = models.ForeignKey(Carrera, on_delete=models.SET_NULL, null=True)
    
    def __str__(self):
        return f"{self.nombre} {self.apellido}"

class Pregunta(models.Model):
    id_pregunta = models.AutoField(primary_key=True)
    block = models.CharField(max_length=20, choices=Bloque.choices, null=True)
    descripcion = models.CharField(max_length=150, null=True)
    numero = models.DecimalField(max_digits=3, decimal_places=0, null=True)
    respuestOK = models.CharField(max_length=1)

    def __str__(self):
        return f"Pregunta {self.descripcion} - {self.numero} - ${self.block}"

class Respuesta(models.Model):
    id_respuesta = models.AutoField(primary_key=True)
    seleccion = models.CharField(max_length=20, choices=Seleccion.choices, null=True)
    preguntaFK = models.ForeignKey(Pregunta, on_delete=models.SET_NULL, null=True)
    estudianteFK = models.ForeignKey(Estudiante, on_delete=models.SET_NULL)
    fecha = models.DateField(auto_now=True)
    
    def __str__(self):
        return f"Descuento {self.estudiante} - {self.seleccion}"  

